<?php

namespace ymobiz\modules\mcms\helpers;

use ymobiz\modules\mcms\models\User;
use yii\base\Security;

class Password extends Security
{
    /**
     * @var integer crypt block size in bytes.
     * For AES-128, AES-192, block size is 128-bit (16 bytes).
     * For AES-256, block size is 256-bit (32 bytes).
     * Recommended value: 32
     */
    public $cryptBlockSize = 32;
    /**
     * @var integer crypt key size in bytes.
     * For AES-192, key size is 192-bit (24 bytes).
     * For AES-256, key size is 256-bit (32 bytes).
     * Recommended value: 32
     */
    public $cryptKeySize = 32;
    /**
     * @var string derivation hash algorithm name.
     * Recommended value: 'sha256'
     */
    public $derivationHash = 'sha256';
    /**
     * @var integer derivation iterations count.
     * Recommended value: 1000000
     */
    public $derivationIterations = 1000000;
    /**
     * @var string strategy, which should be used to derive a key for encryption.
     * Available strategies:
     * - 'pbkdf2' - PBKDF2 key derivation. This option is recommended, but it requires PHP version >= 5.5.0
     * - 'hmac' - HMAC hash key derivation.
     */
    public $deriveKeyStrategy = 'pbkdf2';
    /**
     * @var string strategy, which should be used to generate password hash.
     * Available strategies:
     * - 'password_hash' - use of PHP `password_hash()` function with PASSWORD_DEFAULT algorithm. This option is recommended,
     *   but it requires PHP version >= 5.5.0
     * - 'crypt' - use PHP `crypt()` function.
     */
    public $passwordHashStrategy = 'password_hash';
    /**
     * @var boolean whether to generate unique salt while deriving encryption key.
     * If enabled (recommended) this option increases encrypted text length, but provide more security.
     * If disabled this option reduces encrypted text length, but also reduces security.
     */
    public $useDeriveKeyUniqueSalt = true;
    /**
     * @var string the path or alias of a file that stores the secret keys automatically generated by [[getSecretKey()]].
     * The file must be writable by Web server process. It contains a JSON hash of key names and key values.
     */
    public $secretKeyFile = '@runtime/keys.json';

    /**
     * Wrapper for yii security helper method.
     *
     * @param $password
     * @return string
     */
    public function hash($password)
    {
        return \Yii::$app->security->generatePasswordHash($password,User::COST);
    }

    /**
     * Wrapper for yii security helper method.
     *
     * @param $password
     * @param $hash
     * @return bool
     */
    public function validate($password, $hash)
    {
        return \Yii::$app->security->validatePassword($password, $hash);
    }

    /**
     * Generates user-friendly random password containing at least one lower case letter, one uppercase letter and one
     * digit. The remaining characters in the password are chosen at random from those three sets.
     * @see https://gist.github.com/tylerhall/521810
     * @param $length
     * @return string
     */
    public function generate($length)
    {
        $sets = [
            'abcdefghjkmnpqrstuvwxyz',
            'ABCDEFGHJKMNPQRSTUVWXYZ',
            '23456789'
        ];
        $all = '';
        $password = '';
        foreach ($sets as $set) {
            $password .= $set[array_rand(str_split($set))];
            $all .= $set;
        }

        $all = str_split($all);
        for ($i = 0; $i < $length - count($sets); $i++) {
            $password .= $all[array_rand($all)];
        }

        $password = str_shuffle($password);

        return $password;
    }
}
